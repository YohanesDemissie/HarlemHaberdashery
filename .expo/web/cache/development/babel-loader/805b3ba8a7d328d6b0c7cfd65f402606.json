{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.updatePropsJestWrapper = exports.updateProps = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _Colors = require(\"./Colors\");\n\nvar _core = require(\"./core\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsReanimated = require(\"./js-reanimated\");\n\nvar colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nvar ColorProperties = !(0, _core.isConfigured)() ? [] : (0, _core.makeShareable)(colorProps);\n\nvar updateProps = function updateProps(viewDescriptor, updates, maybeViewRef, adapters) {\n  'worklet';\n\n  var viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach(function (adapter) {\n      adapter(updates);\n    });\n  }\n\n  if (_reactNative.Platform.OS !== 'web') {\n    Object.keys(updates).forEach(function (key) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = (0, _Colors.processColor)(updates[key]);\n      }\n    });\n  }\n\n  var updatePropsInternal = typeof _updateProps === 'undefined' ? _jsReanimated._updatePropsJS : _updateProps;\n  updatePropsInternal(viewDescriptor.value.tag, viewName, updates, maybeViewRef);\n};\n\nexports.updateProps = updateProps;\n\nvar updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptor, updates, maybeViewRef, adapters, animatedStyle) {\n  animatedStyle.current.value = (0, _extends2.default)({}, animatedStyle.current.value, updates);\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\n\nexports.updatePropsJestWrapper = updatePropsJestWrapper;\nvar _default = updateProps;\nexports.default = _default;","map":{"version":3,"sources":["/Users/user/projects/HarlemHaberdashery/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.js"],"names":["colorProps","ColorProperties","updateProps","viewDescriptor","updates","maybeViewRef","adapters","viewName","value","name","forEach","adapter","Platform","OS","Object","keys","key","indexOf","updatePropsInternal","_updateProps","_updatePropsJS","tag","updatePropsJestWrapper","animatedStyle","current"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AAGA,IAAMA,UAAU,GAAG,CACjB,iBADiB,EAEjB,mBAFiB,EAGjB,aAHiB,EAIjB,iBAJiB,EAKjB,kBALiB,EAMjB,gBANiB,EAOjB,kBAPiB,EAQjB,gBARiB,EASjB,OATiB,EAUjB,aAViB,EAWjB,qBAXiB,EAYjB,WAZiB,EAajB,iBAbiB,EAcjB,cAdiB,CAAnB;AAiBA,IAAMC,eAAe,GAAG,CAAC,yBAAD,GAAkB,EAAlB,GAAuB,yBAAcD,UAAd,CAA/C;;AAEO,IAAME,WAAW,GAAG,SAAdA,WAAc,CACzBC,cADyB,EAEzBC,OAFyB,EAGzBC,YAHyB,EAIzBC,QAJyB,EAKtB;AACH;;AAEA,MAAMC,QAAQ,GAAGJ,cAAc,CAACK,KAAf,CAAqBC,IAArB,IAA6B,SAA9C;;AAEA,MAAIH,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACI,OAAT,CAAiB,UAACC,OAAD,EAAa;AAC5BA,MAAAA,OAAO,CAACP,OAAD,CAAP;AACD,KAFD;AAGD;;AAED,MAAIQ,sBAASC,EAAT,KAAgB,KAApB,EAA2B;AACzBC,IAAAA,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBM,OAArB,CAA6B,UAACM,GAAD,EAAS;AACpC,UAAIf,eAAe,CAACgB,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACvCZ,QAAAA,OAAO,CAACY,GAAD,CAAP,GAAe,0BAAaZ,OAAO,CAACY,GAAD,CAApB,CAAf;AACD;AACF,KAJD;AAKD;;AAED,MAAME,mBAAmB,GACvB,OAAOC,YAAP,KAAwB,WAAxB,GAAsCC,4BAAtC,GAAuDD,YADzD;AAGAD,EAAAA,mBAAmB,CACjBf,cAAc,CAACK,KAAf,CAAqBa,GADJ,EAEjBd,QAFiB,EAGjBH,OAHiB,EAIjBC,YAJiB,CAAnB;AAMD,CAjCM;;;;AAmCA,IAAMiB,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCnB,cADoC,EAEpCC,OAFoC,EAGpCC,YAHoC,EAIpCC,QAJoC,EAKpCiB,aALoC,EAMjC;AACHA,EAAAA,aAAa,CAACC,OAAd,CAAsBhB,KAAtB,8BACKe,aAAa,CAACC,OAAd,CAAsBhB,KAD3B,EAEKJ,OAFL;AAKAF,EAAAA,WAAW,CAACC,cAAD,EAAiBC,OAAjB,EAA0BC,YAA1B,EAAwCC,QAAxC,CAAX;AACD,CAbM;;;eAeQJ,W","sourcesContent":["/* global _updateProps */\nimport { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { Platform } from 'react-native';\nimport { _updatePropsJS } from './js-reanimated';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nconst colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nconst ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\n\nexport const updateProps = (\n  viewDescriptor,\n  updates,\n  maybeViewRef,\n  adapters\n) => {\n  'worklet';\n\n  const viewName = viewDescriptor.value.name || 'RCTView';\n\n  if (adapters) {\n    adapters.forEach((adapter) => {\n      adapter(updates);\n    });\n  }\n\n  if (Platform.OS !== 'web') {\n    Object.keys(updates).forEach((key) => {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    });\n  }\n\n  const updatePropsInternal =\n    typeof _updateProps === 'undefined' ? _updatePropsJS : _updateProps;\n\n  updatePropsInternal(\n    viewDescriptor.value.tag,\n    viewName,\n    updates,\n    maybeViewRef\n  );\n};\n\nexport const updatePropsJestWrapper = (\n  viewDescriptor,\n  updates,\n  maybeViewRef,\n  adapters,\n  animatedStyle\n) => {\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptor, updates, maybeViewRef, adapters);\n};\n\nexport default updateProps;"]},"metadata":{},"sourceType":"script"}